{"ast":null,"code":"import React, { useContext, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { StackingOrder } from '../../constants';\nimport StackingContext from './StackingContext';\nvar Stack = /*#__PURE__*/memo(function Stack(_ref) {\n  var children = _ref.children,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? StackingOrder.STACKING_CONTEXT : _ref$value;\n  var previousValue = useContext(StackingContext);\n  var currentValue = Math.max(value, previousValue);\n  var nextValue = currentValue + 1;\n  return /*#__PURE__*/React.createElement(StackingContext.Provider, {\n    value: nextValue\n  }, children(currentValue));\n});\nStack.propTypes = {\n  /**\n   * Function that takes the current z-index and returns a React Node.\n   * (zIndex) => ReactNode.\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Set the value of the stack. This will increment for children.\n   */\n  value: PropTypes.number\n};\nexport default Stack;","map":{"version":3,"sources":["D:/study/WifiAssistant/WifiAssistant/node_modules/evergreen-ui/esm/stack/src/Stack.js"],"names":["React","useContext","memo","PropTypes","StackingOrder","StackingContext","Stack","_ref","children","_ref$value","value","STACKING_CONTEXT","previousValue","currentValue","Math","max","nextValue","createElement","Provider","propTypes","func","isRequired","number"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,IAAIC,KAAK,GAAG,aAAaJ,IAAI,CAAC,SAASI,KAAT,CAAeC,IAAf,EAAqB;AACjD,MAAIC,QAAQ,GAAGD,IAAI,CAACC,QAApB;AAAA,MACIC,UAAU,GAAGF,IAAI,CAACG,KADtB;AAAA,MAEIA,KAAK,GAAGD,UAAU,KAAK,KAAK,CAApB,GAAwBL,aAAa,CAACO,gBAAtC,GAAyDF,UAFrE;AAGA,MAAIG,aAAa,GAAGX,UAAU,CAACI,eAAD,CAA9B;AACA,MAAIQ,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASL,KAAT,EAAgBE,aAAhB,CAAnB;AACA,MAAII,SAAS,GAAGH,YAAY,GAAG,CAA/B;AACA,SAAO,aAAab,KAAK,CAACiB,aAAN,CAAoBZ,eAAe,CAACa,QAApC,EAA8C;AAChER,IAAAA,KAAK,EAAEM;AADyD,GAA9C,EAEjBR,QAAQ,CAACK,YAAD,CAFS,CAApB;AAGD,CAV4B,CAA7B;AAWAP,KAAK,CAACa,SAAN,GAAkB;AAChB;AACF;AACA;AACA;AACEX,EAAAA,QAAQ,EAAEL,SAAS,CAACiB,IAAV,CAAeC,UALT;;AAOhB;AACF;AACA;AACEX,EAAAA,KAAK,EAAEP,SAAS,CAACmB;AAVD,CAAlB;AAYA,eAAehB,KAAf","sourcesContent":["import React, { useContext, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { StackingOrder } from '../../constants';\nimport StackingContext from './StackingContext';\nvar Stack = /*#__PURE__*/memo(function Stack(_ref) {\n  var children = _ref.children,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? StackingOrder.STACKING_CONTEXT : _ref$value;\n  var previousValue = useContext(StackingContext);\n  var currentValue = Math.max(value, previousValue);\n  var nextValue = currentValue + 1;\n  return /*#__PURE__*/React.createElement(StackingContext.Provider, {\n    value: nextValue\n  }, children(currentValue));\n});\nStack.propTypes = {\n  /**\n   * Function that takes the current z-index and returns a React Node.\n   * (zIndex) => ReactNode.\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Set the value of the stack. This will increment for children.\n   */\n  value: PropTypes.number\n};\nexport default Stack;"]},"metadata":{},"sourceType":"module","externalDependencies":[]}