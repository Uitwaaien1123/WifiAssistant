{"ast":null,"code":"import { useCallback } from 'react';\nimport safeInvoke from '../lib/safe-invoke';\nimport { useLatest } from './use-latest';\n/**\n * React hook that returns bind props for a clickable component.\n * When the component has focus, Enter and space activate it\n */\n\nexport function useClickable() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      onKeyDownHandler = _ref.onKeyDown,\n      _ref$tabIndex = _ref.tabIndex,\n      tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex;\n\n  var onKeyDownRef = useLatest(onKeyDownHandler);\n  var onKeyDown = useCallback(function (event) {\n    safeInvoke(onKeyDownRef.current, event);\n    if (event.defaultPrevented) return;\n    if (disabled) return;\n    if (event.metaKey) return;\n    if (event.target !== event.currentTarget) return;\n\n    if (event.key === 'Enter' || event.key === ' ' || event.key === 'Spacebar') {\n      // \"Spacebar\" for IE11 support\n      // Prevent the default action to stop scrolling when space is pressed\n      event.preventDefault();\n      event.currentTarget.click();\n    }\n  }, // onKeyDownRef is a ref, but eslint can't figure that out\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [disabled]);\n  return {\n    // TODO import useFocusable as well (needs to be focusable)\n    tabIndex: disabled ? -1 : tabIndex,\n    onKeyDown: onKeyDown\n  };\n}","map":{"version":3,"sources":["D:/0xtest/wifi-card-master/node_modules/evergreen-ui/esm/hooks/use-clickable.js"],"names":["useCallback","safeInvoke","useLatest","useClickable","_ref","arguments","length","undefined","_ref$disabled","disabled","onKeyDownHandler","onKeyDown","_ref$tabIndex","tabIndex","onKeyDownRef","event","current","defaultPrevented","metaKey","target","currentTarget","key","preventDefault","click"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC7B,MAAIC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AAAA,MACIG,aAAa,GAAGJ,IAAI,CAACK,QADzB;AAAA,MAEIA,QAAQ,GAAGD,aAAa,KAAK,KAAK,CAAvB,GAA2B,KAA3B,GAAmCA,aAFlD;AAAA,MAGIE,gBAAgB,GAAGN,IAAI,CAACO,SAH5B;AAAA,MAIIC,aAAa,GAAGR,IAAI,CAACS,QAJzB;AAAA,MAKIA,QAAQ,GAAGD,aAAa,KAAK,KAAK,CAAvB,GAA2B,CAA3B,GAA+BA,aAL9C;;AAOA,MAAIE,YAAY,GAAGZ,SAAS,CAACQ,gBAAD,CAA5B;AACA,MAAIC,SAAS,GAAGX,WAAW,CAAC,UAAUe,KAAV,EAAiB;AAC3Cd,IAAAA,UAAU,CAACa,YAAY,CAACE,OAAd,EAAuBD,KAAvB,CAAV;AACA,QAAIA,KAAK,CAACE,gBAAV,EAA4B;AAC5B,QAAIR,QAAJ,EAAc;AACd,QAAIM,KAAK,CAACG,OAAV,EAAmB;AACnB,QAAIH,KAAK,CAACI,MAAN,KAAiBJ,KAAK,CAACK,aAA3B,EAA0C;;AAE1C,QAAIL,KAAK,CAACM,GAAN,KAAc,OAAd,IAAyBN,KAAK,CAACM,GAAN,KAAc,GAAvC,IAA8CN,KAAK,CAACM,GAAN,KAAc,UAAhE,EAA4E;AAC1E;AACA;AACAN,MAAAA,KAAK,CAACO,cAAN;AACAP,MAAAA,KAAK,CAACK,aAAN,CAAoBG,KAApB;AACD;AACF,GAb0B,EAaxB;AACH;AACA,GAACd,QAAD,CAf2B,CAA3B;AAgBA,SAAO;AACL;AACAI,IAAAA,QAAQ,EAAEJ,QAAQ,GAAG,CAAC,CAAJ,GAAQI,QAFrB;AAGLF,IAAAA,SAAS,EAAEA;AAHN,GAAP;AAKD","sourcesContent":["import { useCallback } from 'react';\nimport safeInvoke from '../lib/safe-invoke';\nimport { useLatest } from './use-latest';\n/**\n * React hook that returns bind props for a clickable component.\n * When the component has focus, Enter and space activate it\n */\n\nexport function useClickable() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      onKeyDownHandler = _ref.onKeyDown,\n      _ref$tabIndex = _ref.tabIndex,\n      tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex;\n\n  var onKeyDownRef = useLatest(onKeyDownHandler);\n  var onKeyDown = useCallback(function (event) {\n    safeInvoke(onKeyDownRef.current, event);\n    if (event.defaultPrevented) return;\n    if (disabled) return;\n    if (event.metaKey) return;\n    if (event.target !== event.currentTarget) return;\n\n    if (event.key === 'Enter' || event.key === ' ' || event.key === 'Spacebar') {\n      // \"Spacebar\" for IE11 support\n      // Prevent the default action to stop scrolling when space is pressed\n      event.preventDefault();\n      event.currentTarget.click();\n    }\n  }, // onKeyDownRef is a ref, but eslint can't figure that out\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [disabled]);\n  return {\n    // TODO import useFocusable as well (needs to be focusable)\n    tabIndex: disabled ? -1 : tabIndex,\n    onKeyDown: onKeyDown\n  };\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}