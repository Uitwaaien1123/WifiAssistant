{"ast":null,"code":"import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport isFunction from '../../lib/is-function';\nimport { majorScale } from '../../scales';\nimport { useTheme } from '../../theme';\nimport { Text, Paragraph } from '../../typography';\nvar internalStyles = {\n  marginTop: majorScale(3),\n  pointerEvents: 'none'\n};\n\nvar BrowseOrDragText = function BrowseOrDragText(props) {\n  var getBrowseOrDragText = props.browseOrDragText,\n      disabled = props.disabled,\n      maxFiles = props.maxFiles;\n  var defaultOrDragCopy = \"or drag \".concat(maxFiles === 1 ? 'a file' : 'files', \" here\");\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var ctaTextColor = disabled ? colors.gray500 : colors.blue400;\n\n  if (!isFunction(getBrowseOrDragText)) {\n    return /*#__PURE__*/React.createElement(Paragraph, internalStyles, /*#__PURE__*/React.createElement(Text, {\n      color: ctaTextColor\n    }, \"Browse \"), /*#__PURE__*/React.createElement(Text, {\n      color: disabled ? colors.gray500 : colors.gray700\n    }, defaultOrDragCopy));\n  }\n\n  var browseOrDragText = getBrowseOrDragText(maxFiles);\n\n  if (typeof browseOrDragText === 'string') {\n    return /*#__PURE__*/React.createElement(Paragraph, internalStyles, /*#__PURE__*/React.createElement(Text, {\n      color: ctaTextColor\n    }, browseOrDragText));\n  }\n\n  return browseOrDragText;\n};\n\nBrowseOrDragText.propTypes = {\n  /**\n   * Function to return a string or component for the 'Browse or drag' text\n   * @type {(maxFiles: number) => React.ReactNode}\n   */\n  browseOrDragText: PropTypes.func,\n\n  /**\n   * Renders the text in a muted color\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Maximum number of files to accept\n   */\n  maxFiles: PropTypes.number\n};\nexport default /*#__PURE__*/memo(BrowseOrDragText);","map":{"version":3,"sources":["D:/0xtest/wifi-card-master/node_modules/evergreen-ui/esm/file-uploader/src/BrowseOrDragText.js"],"names":["React","memo","PropTypes","isFunction","majorScale","useTheme","Text","Paragraph","internalStyles","marginTop","pointerEvents","BrowseOrDragText","props","getBrowseOrDragText","browseOrDragText","disabled","maxFiles","defaultOrDragCopy","concat","_useTheme","colors","ctaTextColor","gray500","blue400","createElement","color","gray700","propTypes","func","bool","number"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;AACA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,SAAS,EAAEL,UAAU,CAAC,CAAD,CADF;AAEnBM,EAAAA,aAAa,EAAE;AAFI,CAArB;;AAKA,IAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AACtD,MAAIC,mBAAmB,GAAGD,KAAK,CAACE,gBAAhC;AAAA,MACIC,QAAQ,GAAGH,KAAK,CAACG,QADrB;AAAA,MAEIC,QAAQ,GAAGJ,KAAK,CAACI,QAFrB;AAGA,MAAIC,iBAAiB,GAAG,WAAWC,MAAX,CAAkBF,QAAQ,KAAK,CAAb,GAAiB,QAAjB,GAA4B,OAA9C,EAAuD,OAAvD,CAAxB;;AAEA,MAAIG,SAAS,GAAGd,QAAQ,EAAxB;AAAA,MACIe,MAAM,GAAGD,SAAS,CAACC,MADvB;;AAGA,MAAIC,YAAY,GAAGN,QAAQ,GAAGK,MAAM,CAACE,OAAV,GAAoBF,MAAM,CAACG,OAAtD;;AAEA,MAAI,CAACpB,UAAU,CAACU,mBAAD,CAAf,EAAsC;AACpC,WAAO,aAAab,KAAK,CAACwB,aAAN,CAAoBjB,SAApB,EAA+BC,cAA/B,EAA+C,aAAaR,KAAK,CAACwB,aAAN,CAAoBlB,IAApB,EAA0B;AACxGmB,MAAAA,KAAK,EAAEJ;AADiG,KAA1B,EAE7E,SAF6E,CAA5D,EAEL,aAAarB,KAAK,CAACwB,aAAN,CAAoBlB,IAApB,EAA0B;AACpDmB,MAAAA,KAAK,EAAEV,QAAQ,GAAGK,MAAM,CAACE,OAAV,GAAoBF,MAAM,CAACM;AADU,KAA1B,EAEzBT,iBAFyB,CAFR,CAApB;AAKD;;AAED,MAAIH,gBAAgB,GAAGD,mBAAmB,CAACG,QAAD,CAA1C;;AAEA,MAAI,OAAOF,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,WAAO,aAAad,KAAK,CAACwB,aAAN,CAAoBjB,SAApB,EAA+BC,cAA/B,EAA+C,aAAaR,KAAK,CAACwB,aAAN,CAAoBlB,IAApB,EAA0B;AACxGmB,MAAAA,KAAK,EAAEJ;AADiG,KAA1B,EAE7EP,gBAF6E,CAA5D,CAApB;AAGD;;AAED,SAAOA,gBAAP;AACD,CA5BD;;AA8BAH,gBAAgB,CAACgB,SAAjB,GAA6B;AAC3B;AACF;AACA;AACA;AACEb,EAAAA,gBAAgB,EAAEZ,SAAS,CAAC0B,IALD;;AAO3B;AACF;AACA;AACEb,EAAAA,QAAQ,EAAEb,SAAS,CAAC2B,IAVO;;AAY3B;AACF;AACA;AACEb,EAAAA,QAAQ,EAAEd,SAAS,CAAC4B;AAfO,CAA7B;AAiBA,eAAe,aAAa7B,IAAI,CAACU,gBAAD,CAAhC","sourcesContent":["import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport isFunction from '../../lib/is-function';\nimport { majorScale } from '../../scales';\nimport { useTheme } from '../../theme';\nimport { Text, Paragraph } from '../../typography';\nvar internalStyles = {\n  marginTop: majorScale(3),\n  pointerEvents: 'none'\n};\n\nvar BrowseOrDragText = function BrowseOrDragText(props) {\n  var getBrowseOrDragText = props.browseOrDragText,\n      disabled = props.disabled,\n      maxFiles = props.maxFiles;\n  var defaultOrDragCopy = \"or drag \".concat(maxFiles === 1 ? 'a file' : 'files', \" here\");\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var ctaTextColor = disabled ? colors.gray500 : colors.blue400;\n\n  if (!isFunction(getBrowseOrDragText)) {\n    return /*#__PURE__*/React.createElement(Paragraph, internalStyles, /*#__PURE__*/React.createElement(Text, {\n      color: ctaTextColor\n    }, \"Browse \"), /*#__PURE__*/React.createElement(Text, {\n      color: disabled ? colors.gray500 : colors.gray700\n    }, defaultOrDragCopy));\n  }\n\n  var browseOrDragText = getBrowseOrDragText(maxFiles);\n\n  if (typeof browseOrDragText === 'string') {\n    return /*#__PURE__*/React.createElement(Paragraph, internalStyles, /*#__PURE__*/React.createElement(Text, {\n      color: ctaTextColor\n    }, browseOrDragText));\n  }\n\n  return browseOrDragText;\n};\n\nBrowseOrDragText.propTypes = {\n  /**\n   * Function to return a string or component for the 'Browse or drag' text\n   * @type {(maxFiles: number) => React.ReactNode}\n   */\n  browseOrDragText: PropTypes.func,\n\n  /**\n   * Renders the text in a muted color\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Maximum number of files to accept\n   */\n  maxFiles: PropTypes.number\n};\nexport default /*#__PURE__*/memo(BrowseOrDragText);"]},"metadata":{},"sourceType":"module","externalDependencies":[]}