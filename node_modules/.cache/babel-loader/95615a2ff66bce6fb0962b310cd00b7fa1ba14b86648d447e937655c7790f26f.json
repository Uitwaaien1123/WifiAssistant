{"ast":null,"code":"var _jsxFileName = \"D:\\\\0xtest\\\\wifi-card-master\\\\src\\\\components\\\\Settings.js\",\n    _s = $RefreshSig$();\n\nimport { Checkbox, Pane, RadioGroup, SelectField } from 'evergreen-ui';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport i18n from '../i18n';\nimport { Translations } from '../translations';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Settings = props => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const encryptionModes = [{\n    label: '无',\n    value: ''\n  }, {\n    label: 'WPA/WPA2/WPA3',\n    value: 'WPA'\n  }, // { label: 'WPA2-EAP', value: 'WPA2-EAP' },\n  {\n    label: 'WEP',\n    value: 'WEP'\n  }];\n  const eapMethods = [{\n    label: 'PWD',\n    value: 'PWD'\n  }];\n\n  const langSelectDefaultValue = () => {\n    const t = Translations.filter(t => t.id === i18n.language);\n\n    if (t.length !== 1) {\n      return 'en-US';\n    }\n\n    return t[0].id;\n  };\n\n  useEffect(() => {\n    if (props.firstLoad.current && window.innerWidth < 500) {\n      props.onFirstLoad();\n      props.onOrientationChange(true);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Pane, {\n    id: \"settings\",\n    maxWidth: props.settings.portrait ? '350px' : '100%',\n    children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n      label: t('button.rotate'),\n      checked: props.settings.portrait,\n      onChange: () => props.onOrientationChange(!props.settings.portrait)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n      label: t('wifi.password.hide'),\n      checked: props.settings.hidePassword,\n      onChange: () => props.onHidePasswordChange(!props.settings.hidePassword)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n      label: t('wifi.name.hiddenSSID'),\n      checked: props.settings.hiddenSSID,\n      onChange: () => props.onHiddenSSIDChange(!props.settings.hiddenSSID)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n      label: '请选择该wifi的加密方式',\n      size: 16,\n      value: props.settings.encryptionMode,\n      options: encryptionModes,\n      onChange: e => props.onEncryptionModeChange(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Settings, \"yIHkV3cUFHCxFeD16vLIxDL2JDQ=\", false, function () {\n  return [useTranslation];\n});\n\n_c = Settings;\n\nvar _c;\n\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"sources":["D:/0xtest/wifi-card-master/src/components/Settings.js"],"names":["Checkbox","Pane","RadioGroup","SelectField","useEffect","useTranslation","i18n","Translations","Settings","props","t","encryptionModes","label","value","eapMethods","langSelectDefaultValue","filter","id","language","length","firstLoad","current","window","innerWidth","onFirstLoad","onOrientationChange","settings","portrait","hidePassword","onHidePasswordChange","hiddenSSID","onHiddenSSIDChange","encryptionMode","e","onEncryptionModeChange","target"],"mappings":"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","sourcesContent":["import { Checkbox, Pane, RadioGroup, SelectField } from 'evergreen-ui';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport i18n from '../i18n';\nimport { Translations } from '../translations';\nimport './style.css';\n\nexport const Settings = (props) => {\n  const { t } = useTranslation();\n  const encryptionModes = [\n    { label: '无', value: '' },\n    { label: 'WPA/WPA2/WPA3', value: 'WPA' },\n    // { label: 'WPA2-EAP', value: 'WPA2-EAP' },\n    { label: 'WEP', value: 'WEP' },\n  ];\n  const eapMethods = [{ label: 'PWD', value: 'PWD' }];\n  const langSelectDefaultValue = () => {\n    const t = Translations.filter((t) => t.id === i18n.language);\n    if (t.length !== 1) {\n      return 'en-US';\n    }\n    return t[0].id;\n  };\n\n  useEffect(() => {\n    if (props.firstLoad.current && window.innerWidth < 500) {\n      props.onFirstLoad();\n      props.onOrientationChange(true);\n    }\n  });\n\n  return (\n    <Pane id=\"settings\" maxWidth={props.settings.portrait ? '350px' : '100%'}>\n      {/* <SelectField\n        width={300}\n        inputHeight={38}\n        label={t('select')}\n        onChange={(e) => props.onLanguageChange(e.target.value)}\n        defaultValue={langSelectDefaultValue()}\n      >\n        {Translations.map((t) => (\n          <option key={t.id} value={t.id}>\n            {t.name}\n          </option>\n        ))}\n      </SelectField> */}\n\n      <Checkbox\n        label={t('button.rotate')}\n        checked={props.settings.portrait}\n        onChange={() => props.onOrientationChange(!props.settings.portrait)}\n      />\n      <Checkbox\n        label={t('wifi.password.hide')}\n        checked={props.settings.hidePassword}\n        onChange={() =>\n          props.onHidePasswordChange(!props.settings.hidePassword)\n        }\n      />\n      <Checkbox\n        label={t('wifi.name.hiddenSSID')}\n        checked={props.settings.hiddenSSID}\n        onChange={() => props.onHiddenSSIDChange(!props.settings.hiddenSSID)}\n      />\n      <RadioGroup\n        label={'请选择该wifi的加密方式'}\n        size={16}\n        value={props.settings.encryptionMode}\n        options={encryptionModes}\n        onChange={(e) => props.onEncryptionModeChange(e.target.value)}\n      />\n      {/* <RadioGroup\n        label={t('wifi.encryption.eapMethod')}\n        size={16}\n        value={props.settings.eapMethod}\n        options={eapMethods}\n        className={`\n          ${props.settings.encryptionMode !== 'WPA2-EAP' && 'hidden'}\n        `}\n        onChange={(e) => props.onEapMethodChange(e.target.value)}\n      /> */}\n    </Pane>\n  );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}