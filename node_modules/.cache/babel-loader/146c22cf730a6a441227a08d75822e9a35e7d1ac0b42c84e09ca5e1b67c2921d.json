{"ast":null,"code":"import{Checkbox,Pane,RadioGroup,SelectField}from'evergreen-ui';import{useEffect}from'react';import{useTranslation}from'react-i18next';import i18n from'../i18n';import{Translations}from'../translations';import'./style.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Settings=function Settings(props){var _useTranslation=useTranslation(),t=_useTranslation.t;var encryptionModes=[{label:'无',value:''},{label:'WPA/WPA2/WPA3',value:'WPA'},// { label: 'WPA2-EAP', value: 'WPA2-EAP' },\n{label:'WEP',value:'WEP'}];var eapMethods=[{label:'PWD',value:'PWD'}];var langSelectDefaultValue=function langSelectDefaultValue(){var t=Translations.filter(function(t){return t.id===i18n.language;});if(t.length!==1){return'en-US';}return t[0].id;};useEffect(function(){if(props.firstLoad.current&&window.innerWidth<500){props.onFirstLoad();props.onOrientationChange(true);}});return/*#__PURE__*/_jsxs(Pane,{id:\"settings\",maxWidth:props.settings.portrait?'350px':'100%',children:[/*#__PURE__*/_jsx(Checkbox,{label:t('button.rotate'),checked:props.settings.portrait,onChange:function onChange(){return props.onOrientationChange(!props.settings.portrait);}}),/*#__PURE__*/_jsx(Checkbox,{label:t('wifi.password.hide'),checked:props.settings.hidePassword,onChange:function onChange(){return props.onHidePasswordChange(!props.settings.hidePassword);}}),/*#__PURE__*/_jsx(Checkbox,{label:t('wifi.name.hiddenSSID'),checked:props.settings.hiddenSSID,onChange:function onChange(){return props.onHiddenSSIDChange(!props.settings.hiddenSSID);}}),/*#__PURE__*/_jsx(RadioGroup,{label:'请选择该wifi的加密方式',size:16,value:props.settings.encryptionMode,options:encryptionModes,onChange:function onChange(e){return props.onEncryptionModeChange(e.target.value);}})]});};","map":{"version":3,"sources":["D:/0xtest/wifi-card-master/src/components/Settings.js"],"names":["Checkbox","Pane","RadioGroup","SelectField","useEffect","useTranslation","i18n","Translations","Settings","props","t","encryptionModes","label","value","eapMethods","langSelectDefaultValue","filter","id","language","length","firstLoad","current","window","innerWidth","onFirstLoad","onOrientationChange","settings","portrait","hidePassword","onHidePasswordChange","hiddenSSID","onHiddenSSIDChange","encryptionMode","e","onEncryptionModeChange","target"],"mappings":"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","sourcesContent":["import { Checkbox, Pane, RadioGroup, SelectField } from 'evergreen-ui';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport i18n from '../i18n';\nimport { Translations } from '../translations';\nimport './style.css';\n\nexport const Settings = (props) => {\n  const { t } = useTranslation();\n  const encryptionModes = [\n    { label: '无', value: '' },\n    { label: 'WPA/WPA2/WPA3', value: 'WPA' },\n    // { label: 'WPA2-EAP', value: 'WPA2-EAP' },\n    { label: 'WEP', value: 'WEP' },\n  ];\n  const eapMethods = [{ label: 'PWD', value: 'PWD' }];\n  const langSelectDefaultValue = () => {\n    const t = Translations.filter((t) => t.id === i18n.language);\n    if (t.length !== 1) {\n      return 'en-US';\n    }\n    return t[0].id;\n  };\n\n  useEffect(() => {\n    if (props.firstLoad.current && window.innerWidth < 500) {\n      props.onFirstLoad();\n      props.onOrientationChange(true);\n    }\n  });\n\n  return (\n    <Pane id=\"settings\" maxWidth={props.settings.portrait ? '350px' : '100%'}>\n      {/* <SelectField\n        width={300}\n        inputHeight={38}\n        label={t('select')}\n        onChange={(e) => props.onLanguageChange(e.target.value)}\n        defaultValue={langSelectDefaultValue()}\n      >\n        {Translations.map((t) => (\n          <option key={t.id} value={t.id}>\n            {t.name}\n          </option>\n        ))}\n      </SelectField> */}\n\n      <Checkbox\n        label={t('button.rotate')}\n        checked={props.settings.portrait}\n        onChange={() => props.onOrientationChange(!props.settings.portrait)}\n      />\n      <Checkbox\n        label={t('wifi.password.hide')}\n        checked={props.settings.hidePassword}\n        onChange={() =>\n          props.onHidePasswordChange(!props.settings.hidePassword)\n        }\n      />\n      <Checkbox\n        label={t('wifi.name.hiddenSSID')}\n        checked={props.settings.hiddenSSID}\n        onChange={() => props.onHiddenSSIDChange(!props.settings.hiddenSSID)}\n      />\n      <RadioGroup\n        label={'请选择该wifi的加密方式'}\n        size={16}\n        value={props.settings.encryptionMode}\n        options={encryptionModes}\n        onChange={(e) => props.onEncryptionModeChange(e.target.value)}\n      />\n      {/* <RadioGroup\n        label={t('wifi.encryption.eapMethod')}\n        size={16}\n        value={props.settings.eapMethod}\n        options={eapMethods}\n        className={`\n          ${props.settings.encryptionMode !== 'WPA2-EAP' && 'hidden'}\n        `}\n        onChange={(e) => props.onEapMethodChange(e.target.value)}\n      /> */}\n    </Pane>\n  );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}