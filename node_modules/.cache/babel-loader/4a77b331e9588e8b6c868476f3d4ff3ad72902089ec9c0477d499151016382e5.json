{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { memo, useRef, useState, useMemo, useCallback, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLatest } from '../../hooks';\nimport { Textarea } from '../../textarea';\n\nfunction getTableBodyRef(currentRef) {\n  var ref = currentRef;\n  if (!ref) return;\n\n  while (ref) {\n    var isTableBody = ref.hasAttribute('data-evergreen-table-body');\n\n    if (isTableBody) {\n      return ref;\n    }\n\n    if (ref.parentElement) {\n      ref = ref.parentElement;\n    } else {\n      return null;\n    }\n  }\n\n  return ref;\n}\n\nvar EditableCellField = /*#__PURE__*/memo(function EditableCellField(props) {\n  var _props$minHeight = props.minHeight,\n      minHeight = _props$minHeight === void 0 ? 40 : _props$minHeight,\n      _props$minWidth = props.minWidth,\n      minWidth = _props$minWidth === void 0 ? 80 : _props$minWidth,\n      size = props.size,\n      value = props.value,\n      zIndex = props.zIndex;\n  var latestAnimationFrame = useRef();\n  var textareaRef = useRef();\n  var tableBodyRef = useRef();\n  var onCancelRef = useLatest(props.onCancel);\n  var onChangeCompleteRef = useLatest(props.onChangeComplete);\n  var getTargetRef = useLatest(props.getTargetRef);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      height = _useState2[0],\n      setHeight = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      width = _useState4[0],\n      setWidth = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      left = _useState6[0],\n      setLeft = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      top = _useState8[0],\n      setTop = _useState8[1];\n\n  var update = useCallback(function () {\n    function updater() {\n      var targetRef = getTargetRef.current();\n      if (!targetRef) return;\n      tableBodyRef.current = getTableBodyRef(targetRef);\n\n      var _targetRef$getBoundin = targetRef.getBoundingClientRect(),\n          targetHeight = _targetRef$getBoundin.height,\n          targetLeft = _targetRef$getBoundin.left,\n          targetTop = _targetRef$getBoundin.top,\n          targetWidth = _targetRef$getBoundin.width;\n\n      var calculatedTop;\n\n      if (tableBodyRef.current) {\n        var bounds = tableBodyRef.current.getBoundingClientRect();\n        calculatedTop = Math.min(Math.max(targetTop, bounds.top), bounds.bottom - targetHeight);\n      } else {\n        calculatedTop = targetTop;\n      }\n\n      setHeight(targetHeight);\n      setWidth(targetWidth);\n      setLeft(targetLeft);\n      setTop(calculatedTop); // recursively run the updater\n\n      latestAnimationFrame.current = requestAnimationFrame(function () {\n        return updater();\n      });\n    } // kick off the updater\n\n\n    updater(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Mirrors functionality of componentDidMount and componentWillUnmount.\n  // Focus on mount\n\n  useLayoutEffect(function () {\n    update();\n    var requestId = requestAnimationFrame(function () {\n      if (textareaRef.current) {\n        textareaRef.current.focus();\n      }\n    });\n    return function () {\n      cancelAnimationFrame(requestId);\n\n      if (latestAnimationFrame.current) {\n        cancelAnimationFrame(latestAnimationFrame.current);\n      } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n      onCancelRef.current();\n    }; // we only want `update` to run once, and `onCancelRef` is a ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var handleFocus = useCallback(function (e) {\n    e.target.selectionStart = e.target.value.length;\n  }, []);\n  var handleBlur = useCallback(function () {\n    if (textareaRef.current) {\n      onChangeCompleteRef.current(textareaRef.current.value);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var handleKeyDown = useCallback(function (e) {\n    switch (e.key) {\n      case 'Escape':\n        onCancelRef.current();\n        if (textareaRef.current) textareaRef.current.blur();\n        break;\n\n      case 'Enter':\n        if (textareaRef.current) textareaRef.current.blur();\n        e.preventDefault();\n        break;\n\n      case 'Tab':\n        if (textareaRef.current) textareaRef.current.blur();\n        break;\n\n      default:\n        break;\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var style = useMemo(function () {\n    return {\n      left: left,\n      top: top,\n      height: height,\n      minHeight: Math.max(height, minHeight),\n      width: width,\n      minWidth: Math.max(width, minWidth),\n      zIndex: zIndex\n    };\n  }, [left, top, height, width, minHeight, minWidth, zIndex]);\n  return /*#__PURE__*/React.createElement(Textarea, {\n    ref: textareaRef,\n    onKeyDown: handleKeyDown,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    appearance: \"editable-cell\",\n    size: size,\n    style: style,\n    height: null,\n    width: null,\n    minHeight: null,\n    position: \"fixed\",\n    defaultValue: value\n  });\n});\nEditableCellField.propTypes = {\n  /**\n   * Used as the defaultValue of the textarea.\n   */\n  value: PropTypes.string.isRequired,\n\n  /**\n   * The z-index placed on the element.\n   */\n  zIndex: PropTypes.number.isRequired,\n\n  /**\n   * Function to get the target ref of the parent.\n   * Used to mirror the position.\n   */\n  getTargetRef: PropTypes.func.isRequired,\n\n  /**\n   * Min width of the textarea.\n   * The textarea can never be smaller than the cell.\n   */\n  minWidth: PropTypes.number,\n\n  /**\n   * Min height of the textarea.\n   * The textarea can never be smaller than the cell.\n   */\n  minHeight: PropTypes.number,\n\n  /**\n   * Called when the textarea is blurred, pass the value back to the cell.\n   */\n  onChangeComplete: PropTypes.func.isRequired,\n\n  /**\n   * Called when Escape is hit or componentWillUnmount.\n   */\n  onCancel: PropTypes.func.isRequired,\n\n  /**\n   * Text size of the textarea.\n   */\n  size: PropTypes.number\n};\nexport default EditableCellField;","map":{"version":3,"sources":["D:/0xtest/wifi-card-master/node_modules/evergreen-ui/esm/table/src/EditableCellField.js"],"names":["_slicedToArray","React","memo","useRef","useState","useMemo","useCallback","useLayoutEffect","PropTypes","useLatest","Textarea","getTableBodyRef","currentRef","ref","isTableBody","hasAttribute","parentElement","EditableCellField","props","_props$minHeight","minHeight","_props$minWidth","minWidth","size","value","zIndex","latestAnimationFrame","textareaRef","tableBodyRef","onCancelRef","onCancel","onChangeCompleteRef","onChangeComplete","getTargetRef","_useState","_useState2","height","setHeight","_useState3","_useState4","width","setWidth","_useState5","_useState6","left","setLeft","_useState7","_useState8","top","setTop","update","updater","targetRef","current","_targetRef$getBoundin","getBoundingClientRect","targetHeight","targetLeft","targetTop","targetWidth","calculatedTop","bounds","Math","min","max","bottom","requestAnimationFrame","requestId","focus","cancelAnimationFrame","handleFocus","e","target","selectionStart","length","handleBlur","handleKeyDown","key","blur","preventDefault","style","createElement","onKeyDown","onBlur","onFocus","appearance","position","defaultValue","propTypes","string","isRequired","number","func"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { memo, useRef, useState, useMemo, useCallback, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLatest } from '../../hooks';\nimport { Textarea } from '../../textarea';\n\nfunction getTableBodyRef(currentRef) {\n  var ref = currentRef;\n  if (!ref) return;\n\n  while (ref) {\n    var isTableBody = ref.hasAttribute('data-evergreen-table-body');\n\n    if (isTableBody) {\n      return ref;\n    }\n\n    if (ref.parentElement) {\n      ref = ref.parentElement;\n    } else {\n      return null;\n    }\n  }\n\n  return ref;\n}\n\nvar EditableCellField = /*#__PURE__*/memo(function EditableCellField(props) {\n  var _props$minHeight = props.minHeight,\n      minHeight = _props$minHeight === void 0 ? 40 : _props$minHeight,\n      _props$minWidth = props.minWidth,\n      minWidth = _props$minWidth === void 0 ? 80 : _props$minWidth,\n      size = props.size,\n      value = props.value,\n      zIndex = props.zIndex;\n  var latestAnimationFrame = useRef();\n  var textareaRef = useRef();\n  var tableBodyRef = useRef();\n  var onCancelRef = useLatest(props.onCancel);\n  var onChangeCompleteRef = useLatest(props.onChangeComplete);\n  var getTargetRef = useLatest(props.getTargetRef);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      height = _useState2[0],\n      setHeight = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      width = _useState4[0],\n      setWidth = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      left = _useState6[0],\n      setLeft = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      top = _useState8[0],\n      setTop = _useState8[1];\n\n  var update = useCallback(function () {\n    function updater() {\n      var targetRef = getTargetRef.current();\n      if (!targetRef) return;\n      tableBodyRef.current = getTableBodyRef(targetRef);\n\n      var _targetRef$getBoundin = targetRef.getBoundingClientRect(),\n          targetHeight = _targetRef$getBoundin.height,\n          targetLeft = _targetRef$getBoundin.left,\n          targetTop = _targetRef$getBoundin.top,\n          targetWidth = _targetRef$getBoundin.width;\n\n      var calculatedTop;\n\n      if (tableBodyRef.current) {\n        var bounds = tableBodyRef.current.getBoundingClientRect();\n        calculatedTop = Math.min(Math.max(targetTop, bounds.top), bounds.bottom - targetHeight);\n      } else {\n        calculatedTop = targetTop;\n      }\n\n      setHeight(targetHeight);\n      setWidth(targetWidth);\n      setLeft(targetLeft);\n      setTop(calculatedTop); // recursively run the updater\n\n      latestAnimationFrame.current = requestAnimationFrame(function () {\n        return updater();\n      });\n    } // kick off the updater\n\n\n    updater(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Mirrors functionality of componentDidMount and componentWillUnmount.\n  // Focus on mount\n\n  useLayoutEffect(function () {\n    update();\n    var requestId = requestAnimationFrame(function () {\n      if (textareaRef.current) {\n        textareaRef.current.focus();\n      }\n    });\n    return function () {\n      cancelAnimationFrame(requestId);\n\n      if (latestAnimationFrame.current) {\n        cancelAnimationFrame(latestAnimationFrame.current);\n      } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n      onCancelRef.current();\n    }; // we only want `update` to run once, and `onCancelRef` is a ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var handleFocus = useCallback(function (e) {\n    e.target.selectionStart = e.target.value.length;\n  }, []);\n  var handleBlur = useCallback(function () {\n    if (textareaRef.current) {\n      onChangeCompleteRef.current(textareaRef.current.value);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var handleKeyDown = useCallback(function (e) {\n    switch (e.key) {\n      case 'Escape':\n        onCancelRef.current();\n        if (textareaRef.current) textareaRef.current.blur();\n        break;\n\n      case 'Enter':\n        if (textareaRef.current) textareaRef.current.blur();\n        e.preventDefault();\n        break;\n\n      case 'Tab':\n        if (textareaRef.current) textareaRef.current.blur();\n        break;\n\n      default:\n        break;\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var style = useMemo(function () {\n    return {\n      left: left,\n      top: top,\n      height: height,\n      minHeight: Math.max(height, minHeight),\n      width: width,\n      minWidth: Math.max(width, minWidth),\n      zIndex: zIndex\n    };\n  }, [left, top, height, width, minHeight, minWidth, zIndex]);\n  return /*#__PURE__*/React.createElement(Textarea, {\n    ref: textareaRef,\n    onKeyDown: handleKeyDown,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    appearance: \"editable-cell\",\n    size: size,\n    style: style,\n    height: null,\n    width: null,\n    minHeight: null,\n    position: \"fixed\",\n    defaultValue: value\n  });\n});\nEditableCellField.propTypes = {\n  /**\n   * Used as the defaultValue of the textarea.\n   */\n  value: PropTypes.string.isRequired,\n\n  /**\n   * The z-index placed on the element.\n   */\n  zIndex: PropTypes.number.isRequired,\n\n  /**\n   * Function to get the target ref of the parent.\n   * Used to mirror the position.\n   */\n  getTargetRef: PropTypes.func.isRequired,\n\n  /**\n   * Min width of the textarea.\n   * The textarea can never be smaller than the cell.\n   */\n  minWidth: PropTypes.number,\n\n  /**\n   * Min height of the textarea.\n   * The textarea can never be smaller than the cell.\n   */\n  minHeight: PropTypes.number,\n\n  /**\n   * Called when the textarea is blurred, pass the value back to the cell.\n   */\n  onChangeComplete: PropTypes.func.isRequired,\n\n  /**\n   * Called when Escape is hit or componentWillUnmount.\n   */\n  onCancel: PropTypes.func.isRequired,\n\n  /**\n   * Text size of the textarea.\n   */\n  size: PropTypes.number\n};\nexport default EditableCellField;"]},"metadata":{},"sourceType":"module","externalDependencies":[]}