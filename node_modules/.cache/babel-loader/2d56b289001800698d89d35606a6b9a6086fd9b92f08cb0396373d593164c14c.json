{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"allowAutoHeight\", \"children\", \"defaultHeight\", \"estimatedItemSize\", \"height\", \"onScroll\", \"overscanCount\", \"scrollOffset\", \"scrollToAlignment\", \"scrollToIndex\", \"useAverageAutoHeightEstimation\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, useState, useEffect } from 'react';\nimport VirtualList from '@segment/react-tiny-virtual-list';\nimport debounce from 'lodash.debounce';\nimport PropTypes from 'prop-types';\nimport { useForceUpdate } from '../../hooks';\nimport { Pane } from '../../layers';\nvar TableVirtualBody = /*#__PURE__*/memo(function TableVirtualBody(props) {\n  var _props$allowAutoHeigh = props.allowAutoHeight,\n      allowAutoHeight = _props$allowAutoHeigh === void 0 ? false : _props$allowAutoHeigh,\n      inputChildren = props.children,\n      _props$defaultHeight = props.defaultHeight,\n      defaultHeight = _props$defaultHeight === void 0 ? 48 : _props$defaultHeight,\n      estimatedItemSize = props.estimatedItemSize,\n      paneHeight = props.height,\n      onScroll = props.onScroll,\n      _props$overscanCount = props.overscanCount,\n      overscanCount = _props$overscanCount === void 0 ? 5 : _props$overscanCount,\n      scrollOffset = props.scrollOffset,\n      scrollToAlignment = props.scrollToAlignment,\n      scrollToIndex = props.scrollToIndex,\n      _props$useAverageAuto = props.useAverageAutoHeightEstimation,\n      useAverageAutoHeightEstimation = _props$useAverageAuto === void 0 ? true : _props$useAverageAuto,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var forceUpdate = useForceUpdate();\n  var autoHeights = [];\n  var autoHeightRefs = [];\n  var averageAutoHeight = defaultHeight;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      paneRef = _useState2[0],\n      setPaneRef = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isIntegerHeight = _useState4[0],\n      setIsIntegerHeight = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      calculatedHeight = _useState6[0],\n      setCalculatedHeight = _useState6[1];\n\n  var updateOnResize = function updateOnResize() {\n    autoHeights = [];\n    autoHeightRefs = [];\n    averageAutoHeight = defaultHeight; // Simply return when we now the height of the pane is fixed.\n\n    if (isIntegerHeight) return; // Return if we are in a weird edge case in which the ref is no longer valid.\n\n    if (paneRef && paneRef instanceof Node) {\n      var tempCalculatedHeight = paneRef.offsetHeight;\n\n      if (tempCalculatedHeight > 0) {\n        // Save the calculated height which is needed for the VirtualList.\n        setCalculatedHeight(tempCalculatedHeight); // Prevent updateOnResize being called recursively when there is a valid height.\n\n        return;\n      }\n    } // When height is still 0 (or paneRef is not valid) try recursively until success.\n\n\n    requestAnimationFrame(function () {\n      updateOnResize();\n    });\n  };\n\n  var onResize = debounce(updateOnResize, 200);\n  useEffect(function () {\n    if (props.height !== calculatedHeight) {\n      setIsIntegerHeight(Number.isInteger(props.height));\n    }\n  }, [props.height]);\n  useEffect(function () {\n    if (paneRef && paneRef instanceof Node) {\n      updateOnResize();\n    }\n  }, [paneRef]); // Mirrors functionality of componentDidMount and componentWillUnmount.\n  // By passing an empty array, will only run on first render, the function returned\n  // will be called on component unmount\n\n  useEffect(function () {\n    updateOnResize();\n    window.addEventListener('resize', onResize, false);\n    return function () {\n      window.removeEventListener('resize', onResize);\n    };\n  }, []);\n  /**\n   * This function will process all items that have height=\"auto\" set.\n   * It will loop through all refs and get calculate the height.\n   */\n\n  var processAutoHeights = function processAutoHeights() {\n    var isUpdated = false; // This will determine the averageAutoHeight.\n\n    var total = 0;\n    var totalAmount = 0; // Loop through all of the refs that have height=\"auto\".\n\n    autoHeightRefs.forEach(function (ref, index) {\n      // If the height is already calculated, skip it,\n      // but calculate the height for the total.\n      if (autoHeights[index]) {\n        total += autoHeights[index];\n        totalAmount += 1;\n        return;\n      } // Make sure the ref has a child\n\n\n      if (ref && ref.childNodes && ref.childNodes[0] && Number.isInteger(ref.childNodes[0].offsetHeight)) {\n        var height = ref.childNodes[0].offsetHeight; // Add to the total to calculate the averageAutoHeight.\n\n        total += height;\n        totalAmount += 1; // Cache the height.\n\n        autoHeights[index] = height; // Set the update flag to true.\n\n        isUpdated = true;\n      }\n    }); // Save the average height.\n\n    averageAutoHeight = total / totalAmount; // There are some new heights detected that had previously not been calculated.\n    // Call forceUpdate to make sure the virtual list renders again.\n\n    if (isUpdated) forceUpdate();\n  };\n\n  var onVirtualHelperRef = function onVirtualHelperRef(index, ref) {\n    autoHeightRefs[index] = ref;\n    requestAnimationFrame(function () {\n      processAutoHeights();\n    });\n  };\n\n  var getItemSize = function getItemSize(children) {\n    // Prefer to return a array of all heights.\n    if (!allowAutoHeight) {\n      return children.map(function (child) {\n        if (! /*#__PURE__*/React.isValidElement(child)) return defaultHeight;\n        var height = child.props.height;\n\n        if (Number.isInteger(height)) {\n          return height;\n        }\n\n        return defaultHeight;\n      });\n    } // If allowAutoHeight is true, return a function instead.\n\n\n    var itemSizeFn = function itemSizeFn(index) {\n      if (! /*#__PURE__*/React.isValidElement(children[index])) return defaultHeight;\n      var height = children[index].props.height; // When the height is number simply, simply return it.\n\n      if (Number.isInteger(height)) {\n        return height;\n      } // When allowAutoHeight is set and  the height is set to \"auto\"...\n\n\n      if (allowAutoHeight && children[index].props.height === 'auto') {\n        // ... and the height is calculated, return the calculated height.\n        if (autoHeights[index]) return autoHeights[index]; // ... if the height is not yet calculated, return the averge\n\n        if (useAverageAutoHeightEstimation) return averageAutoHeight;\n      } // Return the default height.\n\n\n      return defaultHeight;\n    };\n\n    return itemSizeFn;\n  }; // Children always needs to be an array.\n\n\n  var children = Array.isArray(inputChildren) ? inputChildren : React.Children.toArray(inputChildren);\n  var itemSize = getItemSize(children);\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    \"data-evergreen-table-body\": true,\n    ref: setPaneRef,\n    height: paneHeight,\n    flex: \"1\",\n    overflow: \"hidden\"\n  }, rest), /*#__PURE__*/React.createElement(VirtualList, {\n    height: isIntegerHeight ? paneHeight : calculatedHeight,\n    width: \"100%\",\n    estimatedItemSize: allowAutoHeight && useAverageAutoHeightEstimation ? averageAutoHeight : estimatedItemSize || null,\n    itemSize: itemSize,\n    overscanCount: overscanCount,\n    itemCount: React.Children.count(children),\n    scrollToIndex: scrollToIndex,\n    scrollOffset: scrollOffset,\n    scrollToAlignment: scrollToAlignment,\n    onScroll: onScroll,\n    renderItem: function renderItem(_ref) {\n      var index = _ref.index,\n          style = _ref.style;\n      var child = children[index];\n      var key = child.key || index;\n      var props = {\n        key: key,\n        style: style\n      }; // If some children are strings by accident, support this gracefully.\n\n      if (! /*#__PURE__*/React.isValidElement(child)) {\n        if (typeof child === 'string') {\n          return /*#__PURE__*/React.createElement(\"div\", props, child);\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", props, \"\\xA0\");\n      } // When allowing height=\"auto\" for rows, and a auto height item is\n      // rendered for the first time...\n\n\n      if (allowAutoHeight && /*#__PURE__*/React.isValidElement(child) && child.props.height === 'auto' && // ... and only when the height is not already been calculated.\n      !autoHeights[index]) {\n        // ... render the item in a helper div, the ref is used to calculate\n        // the height of its children.\n        return /*#__PURE__*/React.createElement(\"div\", _extends({\n          ref: function ref(_ref2) {\n            return onVirtualHelperRef(index, _ref2);\n          },\n          \"data-virtual-index\": index\n        }, props, {\n          style: _objectSpread({\n            opacity: 0\n          }, props.style)\n        }), child);\n      } // When allowAutoHeight is false, or when the height is known.\n      // Simply render the item.\n\n\n      return /*#__PURE__*/React.cloneElement(child, props);\n    }\n  }));\n});\nTableVirtualBody.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /**\n   * Children needs to be an array of a single node.\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n\n  /**\n   * Default height of each row.\n   * 48 is the default height of a TableRow.\n   */\n  defaultHeight: PropTypes.number,\n\n  /**\n   * When true, support `height=\"auto\"` on children being rendered.\n   * This is somewhat of an expirmental feature.\n   */\n  allowAutoHeight: PropTypes.bool,\n\n  /**\n   * The overscanCount property passed to react-tiny-virtual-list.\n   */\n  overscanCount: PropTypes.number,\n\n  /**\n   * When passed, this is used as the `estimatedItemSize` in react-tiny-virtual-list.\n   * Only when `allowAutoHeight` and`useAverageAutoHeightEstimation` are false.\n   */\n  estimatedItemSize: PropTypes.number,\n\n  /**\n   * When allowAutoHeight is true and this prop is true, the estimated height\n   * will be computed based on the average height of auto height rows.\n   */\n  useAverageAutoHeightEstimation: PropTypes.bool,\n\n  /**\n   * The scrollToIndex property passed to react-tiny-virtual-list\n   */\n  scrollToIndex: PropTypes.number,\n\n  /**\n   * The scrollOffset property passed to react-tiny-virtual-list\n   */\n  scrollOffset: PropTypes.number,\n\n  /**\n   * The scrollToAlignment property passed to react-tiny-virtual-list\n   */\n  scrollToAlignment: PropTypes.oneOf(['start', 'center', 'end', 'auto']),\n\n  /**\n   * The onScroll callback passed to react-tiny-virtual-list\n   */\n  onScroll: PropTypes.func\n});\nexport default TableVirtualBody;","map":{"version":3,"sources":["D:/study/WifiAssistant/WifiAssistant/node_modules/evergreen-ui/esm/table/src/TableVirtualBody.js"],"names":["_extends","_defineProperty","_slicedToArray","_objectWithoutProperties","_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","React","memo","useState","useEffect","VirtualList","debounce","PropTypes","useForceUpdate","Pane","TableVirtualBody","props","_props$allowAutoHeigh","allowAutoHeight","inputChildren","children","_props$defaultHeight","defaultHeight","estimatedItemSize","paneHeight","height","onScroll","_props$overscanCount","overscanCount","scrollOffset","scrollToAlignment","scrollToIndex","_props$useAverageAuto","useAverageAutoHeightEstimation","rest","forceUpdate","autoHeights","autoHeightRefs","averageAutoHeight","_useState","_useState2","paneRef","setPaneRef","_useState3","_useState4","isIntegerHeight","setIsIntegerHeight","_useState5","_useState6","calculatedHeight","setCalculatedHeight","updateOnResize","Node","tempCalculatedHeight","offsetHeight","requestAnimationFrame","onResize","Number","isInteger","window","addEventListener","removeEventListener","processAutoHeights","isUpdated","total","totalAmount","ref","index","childNodes","onVirtualHelperRef","getItemSize","map","child","isValidElement","itemSizeFn","Array","isArray","Children","toArray","itemSize","createElement","flex","overflow","width","itemCount","count","renderItem","_ref","style","_ref2","opacity","cloneElement","propTypes","oneOfType","arrayOf","node","number","bool","oneOf","func"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"allowAutoHeight\", \"children\", \"defaultHeight\", \"estimatedItemSize\", \"height\", \"onScroll\", \"overscanCount\", \"scrollOffset\", \"scrollToAlignment\", \"scrollToIndex\", \"useAverageAutoHeightEstimation\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { memo, useState, useEffect } from 'react';\nimport VirtualList from '@segment/react-tiny-virtual-list';\nimport debounce from 'lodash.debounce';\nimport PropTypes from 'prop-types';\nimport { useForceUpdate } from '../../hooks';\nimport { Pane } from '../../layers';\nvar TableVirtualBody = /*#__PURE__*/memo(function TableVirtualBody(props) {\n  var _props$allowAutoHeigh = props.allowAutoHeight,\n      allowAutoHeight = _props$allowAutoHeigh === void 0 ? false : _props$allowAutoHeigh,\n      inputChildren = props.children,\n      _props$defaultHeight = props.defaultHeight,\n      defaultHeight = _props$defaultHeight === void 0 ? 48 : _props$defaultHeight,\n      estimatedItemSize = props.estimatedItemSize,\n      paneHeight = props.height,\n      onScroll = props.onScroll,\n      _props$overscanCount = props.overscanCount,\n      overscanCount = _props$overscanCount === void 0 ? 5 : _props$overscanCount,\n      scrollOffset = props.scrollOffset,\n      scrollToAlignment = props.scrollToAlignment,\n      scrollToIndex = props.scrollToIndex,\n      _props$useAverageAuto = props.useAverageAutoHeightEstimation,\n      useAverageAutoHeightEstimation = _props$useAverageAuto === void 0 ? true : _props$useAverageAuto,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var forceUpdate = useForceUpdate();\n  var autoHeights = [];\n  var autoHeightRefs = [];\n  var averageAutoHeight = defaultHeight;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      paneRef = _useState2[0],\n      setPaneRef = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isIntegerHeight = _useState4[0],\n      setIsIntegerHeight = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      calculatedHeight = _useState6[0],\n      setCalculatedHeight = _useState6[1];\n\n  var updateOnResize = function updateOnResize() {\n    autoHeights = [];\n    autoHeightRefs = [];\n    averageAutoHeight = defaultHeight; // Simply return when we now the height of the pane is fixed.\n\n    if (isIntegerHeight) return; // Return if we are in a weird edge case in which the ref is no longer valid.\n\n    if (paneRef && paneRef instanceof Node) {\n      var tempCalculatedHeight = paneRef.offsetHeight;\n\n      if (tempCalculatedHeight > 0) {\n        // Save the calculated height which is needed for the VirtualList.\n        setCalculatedHeight(tempCalculatedHeight); // Prevent updateOnResize being called recursively when there is a valid height.\n\n        return;\n      }\n    } // When height is still 0 (or paneRef is not valid) try recursively until success.\n\n\n    requestAnimationFrame(function () {\n      updateOnResize();\n    });\n  };\n\n  var onResize = debounce(updateOnResize, 200);\n  useEffect(function () {\n    if (props.height !== calculatedHeight) {\n      setIsIntegerHeight(Number.isInteger(props.height));\n    }\n  }, [props.height]);\n  useEffect(function () {\n    if (paneRef && paneRef instanceof Node) {\n      updateOnResize();\n    }\n  }, [paneRef]); // Mirrors functionality of componentDidMount and componentWillUnmount.\n  // By passing an empty array, will only run on first render, the function returned\n  // will be called on component unmount\n\n  useEffect(function () {\n    updateOnResize();\n    window.addEventListener('resize', onResize, false);\n    return function () {\n      window.removeEventListener('resize', onResize);\n    };\n  }, []);\n  /**\n   * This function will process all items that have height=\"auto\" set.\n   * It will loop through all refs and get calculate the height.\n   */\n\n  var processAutoHeights = function processAutoHeights() {\n    var isUpdated = false; // This will determine the averageAutoHeight.\n\n    var total = 0;\n    var totalAmount = 0; // Loop through all of the refs that have height=\"auto\".\n\n    autoHeightRefs.forEach(function (ref, index) {\n      // If the height is already calculated, skip it,\n      // but calculate the height for the total.\n      if (autoHeights[index]) {\n        total += autoHeights[index];\n        totalAmount += 1;\n        return;\n      } // Make sure the ref has a child\n\n\n      if (ref && ref.childNodes && ref.childNodes[0] && Number.isInteger(ref.childNodes[0].offsetHeight)) {\n        var height = ref.childNodes[0].offsetHeight; // Add to the total to calculate the averageAutoHeight.\n\n        total += height;\n        totalAmount += 1; // Cache the height.\n\n        autoHeights[index] = height; // Set the update flag to true.\n\n        isUpdated = true;\n      }\n    }); // Save the average height.\n\n    averageAutoHeight = total / totalAmount; // There are some new heights detected that had previously not been calculated.\n    // Call forceUpdate to make sure the virtual list renders again.\n\n    if (isUpdated) forceUpdate();\n  };\n\n  var onVirtualHelperRef = function onVirtualHelperRef(index, ref) {\n    autoHeightRefs[index] = ref;\n    requestAnimationFrame(function () {\n      processAutoHeights();\n    });\n  };\n\n  var getItemSize = function getItemSize(children) {\n    // Prefer to return a array of all heights.\n    if (!allowAutoHeight) {\n      return children.map(function (child) {\n        if (! /*#__PURE__*/React.isValidElement(child)) return defaultHeight;\n        var height = child.props.height;\n\n        if (Number.isInteger(height)) {\n          return height;\n        }\n\n        return defaultHeight;\n      });\n    } // If allowAutoHeight is true, return a function instead.\n\n\n    var itemSizeFn = function itemSizeFn(index) {\n      if (! /*#__PURE__*/React.isValidElement(children[index])) return defaultHeight;\n      var height = children[index].props.height; // When the height is number simply, simply return it.\n\n      if (Number.isInteger(height)) {\n        return height;\n      } // When allowAutoHeight is set and  the height is set to \"auto\"...\n\n\n      if (allowAutoHeight && children[index].props.height === 'auto') {\n        // ... and the height is calculated, return the calculated height.\n        if (autoHeights[index]) return autoHeights[index]; // ... if the height is not yet calculated, return the averge\n\n        if (useAverageAutoHeightEstimation) return averageAutoHeight;\n      } // Return the default height.\n\n\n      return defaultHeight;\n    };\n\n    return itemSizeFn;\n  }; // Children always needs to be an array.\n\n\n  var children = Array.isArray(inputChildren) ? inputChildren : React.Children.toArray(inputChildren);\n  var itemSize = getItemSize(children);\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    \"data-evergreen-table-body\": true,\n    ref: setPaneRef,\n    height: paneHeight,\n    flex: \"1\",\n    overflow: \"hidden\"\n  }, rest), /*#__PURE__*/React.createElement(VirtualList, {\n    height: isIntegerHeight ? paneHeight : calculatedHeight,\n    width: \"100%\",\n    estimatedItemSize: allowAutoHeight && useAverageAutoHeightEstimation ? averageAutoHeight : estimatedItemSize || null,\n    itemSize: itemSize,\n    overscanCount: overscanCount,\n    itemCount: React.Children.count(children),\n    scrollToIndex: scrollToIndex,\n    scrollOffset: scrollOffset,\n    scrollToAlignment: scrollToAlignment,\n    onScroll: onScroll,\n    renderItem: function renderItem(_ref) {\n      var index = _ref.index,\n          style = _ref.style;\n      var child = children[index];\n      var key = child.key || index;\n      var props = {\n        key: key,\n        style: style\n      }; // If some children are strings by accident, support this gracefully.\n\n      if (! /*#__PURE__*/React.isValidElement(child)) {\n        if (typeof child === 'string') {\n          return /*#__PURE__*/React.createElement(\"div\", props, child);\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", props, \"\\xA0\");\n      } // When allowing height=\"auto\" for rows, and a auto height item is\n      // rendered for the first time...\n\n\n      if (allowAutoHeight && /*#__PURE__*/React.isValidElement(child) && child.props.height === 'auto' && // ... and only when the height is not already been calculated.\n      !autoHeights[index]) {\n        // ... render the item in a helper div, the ref is used to calculate\n        // the height of its children.\n        return /*#__PURE__*/React.createElement(\"div\", _extends({\n          ref: function ref(_ref2) {\n            return onVirtualHelperRef(index, _ref2);\n          },\n          \"data-virtual-index\": index\n        }, props, {\n          style: _objectSpread({\n            opacity: 0\n          }, props.style)\n        }), child);\n      } // When allowAutoHeight is false, or when the height is known.\n      // Simply render the item.\n\n\n      return /*#__PURE__*/React.cloneElement(child, props);\n    }\n  }));\n});\nTableVirtualBody.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /**\n   * Children needs to be an array of a single node.\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n\n  /**\n   * Default height of each row.\n   * 48 is the default height of a TableRow.\n   */\n  defaultHeight: PropTypes.number,\n\n  /**\n   * When true, support `height=\"auto\"` on children being rendered.\n   * This is somewhat of an expirmental feature.\n   */\n  allowAutoHeight: PropTypes.bool,\n\n  /**\n   * The overscanCount property passed to react-tiny-virtual-list.\n   */\n  overscanCount: PropTypes.number,\n\n  /**\n   * When passed, this is used as the `estimatedItemSize` in react-tiny-virtual-list.\n   * Only when `allowAutoHeight` and`useAverageAutoHeightEstimation` are false.\n   */\n  estimatedItemSize: PropTypes.number,\n\n  /**\n   * When allowAutoHeight is true and this prop is true, the estimated height\n   * will be computed based on the average height of auto height rows.\n   */\n  useAverageAutoHeightEstimation: PropTypes.bool,\n\n  /**\n   * The scrollToIndex property passed to react-tiny-virtual-list\n   */\n  scrollToIndex: PropTypes.number,\n\n  /**\n   * The scrollOffset property passed to react-tiny-virtual-list\n   */\n  scrollOffset: PropTypes.number,\n\n  /**\n   * The scrollToAlignment property passed to react-tiny-virtual-list\n   */\n  scrollToAlignment: PropTypes.oneOf(['start', 'center', 'end', 'auto']),\n\n  /**\n   * The onScroll callback passed to react-tiny-virtual-list\n   */\n  onScroll: PropTypes.func\n});\nexport default TableVirtualBody;"]},"metadata":{},"sourceType":"module","externalDependencies":[]}